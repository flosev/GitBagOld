<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
         http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>net.golovach</groupId>
    <artifactId>quiz01</artifactId>
    <packaging>war</packaging>
    <version>0.1</version>
    <name>Quiz Webapp</name>

    <properties>
        <jdk.version>1.7</jdk.version>
        <spring.version>3.2.4.RELEASE</spring.version>
        <spring-data-jpa.version>1.4.2.RELEASE</spring-data-jpa.version>
        <hibernate.version>4.2.1.Final</hibernate.version>
        <ehcache.version>2.6.6</ehcache.version>
    </properties>

    <dependencies>
    <!--userdao-->

        <dependency>
        <groupId>org.hibernate</groupId>
        <artifactId>hibernate-entitymanager</artifactId>
        <version>${hibernate.version}</version>
    </dependency>

        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-ehcache</artifactId>
            <version>${hibernate.version}</version>
        </dependency>
        <dependency>
            <groupId>net.sf.ehcache</groupId>
            <artifactId>ehcache-core</artifactId>
            <version>${ehcache.version}</version>
        </dependency>

        <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-orm</artifactId>
        <version>3.1.0.RELEASE</version>
    </dependency>
        <!-- TDD: JUnit, Hamcrest, Mockito -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.hamcrest</groupId>
                    <artifactId>hamcrest-core</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-all</artifactId>
            <version>1.3</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <version>1.9.0</version>
            <scope>test</scope>
        </dependency>

        <!-- DB -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.17</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>c3p0</groupId>
            <artifactId>c3p0</artifactId>
            <version>0.9.1.2</version>
        </dependency>
        <dependency>
            <groupId>com.jolbox</groupId>
            <artifactId>bonecp</artifactId>
            <version>0.8.0-rc3</version>
        </dependency>
        <dependency>
            <groupId>org.hsqldb</groupId>
            <artifactId>hsqldb</artifactId>
            <version>2.3.0</version>
        </dependency>


        <!-- Servlet API -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.0.1</version>
            <!-- scope=provided значит, что зависимость будет добавлена
            И в classpath компилятору,
            И в JVM при запуске тестов,
            НО не в /lib при окончательном формировании артефакта-->
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>taglibs</groupId>
            <artifactId>standard</artifactId>
            <version>1.1.2</version>
        </dependency>
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
            <!-- scope=compile значит, что зависимость будет добавлена
            И в classpath компилятору,
            И в JVM при запуске тестов,
            И в /lib при окончательном формировании артефакта-->
            <scope>compile</scope>
        </dependency>
        <!-- Spring (Business Logic Container) -->
        <!-- Core utilities used by other modules. Define this if you use Spring Utility APIs (org.springframework.core.*/org.springframework.util.*) -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
            <scope>compile</scope>
            <!-- Явное "отключение" неявной транзитивной зависимости -->
            <!-- Java/JVM имеют склонность к "dll hell" -->
            <!-- Решается при помощи явного оперирования ClassLoader
            или технологий делающих это неявно (OSGi, ...) -->
            <exclusions>
                <exclusion>
                    <groupId>log4j</groupId>
                    <artifactId>log4j</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- Bean Factory and JavaBeans utilities (depends on spring-core) Define this if you use Spring Bean APIs (org.springframework.beans.*) -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
            <version>${spring.version}</version>
            <scope>compile</scope>
            <exclusions>
                <exclusion>
                    <groupId>log4j</groupId>
                    <artifactId>log4j</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- Application Context (depends on spring-core, spring-expression, spring-aop, spring-beans) This is the central artifact for Spring's Dependency Injection Container and is generally always defined -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.version}</version>
            <scope>compile</scope>
            <exclusions>
                <exclusion>
                    <groupId>log4j</groupId>
                    <artifactId>log4j</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${spring.version}</version>
            <scope>compile</scope>
        </dependency>

        <!-- Logging -->
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.17</version>
            <scope>compile</scope>
        </dependency>
        <!-- Test -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <!-- scope=test значит, что зависимость будет добавлена
            И в classpath компилятору,
            И в JVM при запуске тестов,
            НО не в /lib при окончательном формировании артефакта-->
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <version>1.9.0</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>1.7.5</version>
        </dependency>

        <!--<dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>1.6.4</version>
        </dependency>-->

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <version>1.7.5</version>
        </dependency>

    </dependencies>


    <repositories>
        <!-- 'Центральный репозиторий' - указывать нет смысла (показали для примера) -->
        <repository>
            <id>central</id>
            <url>http://repo1.maven.org/maven2/</url>
        </repository>
        <!-- Дополнительный репозиторий от Jboss -->
        <!-- Не все есть в центральном и не всегда в самой актуальной версии -->
        <!-- Иногда стоит указывать репозиторий "производителя" -->
        <repository>
            <id>jboss</id>
            <url>http://repository.jboss.org/maven2/</url>
        </repository>
    </repositories>

    <build>
        <finalName>quiz01</finalName>
        <pluginManagement>
            <plugins>
                <!-- явно указываем плагину, отвечающему за компиляцию -->
                <!-- параметры -source и -target, которые будет переданы при вызове javac -->
                <!-- javac -source 1.7 -target 1.7 ... -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <configuration>
                        <source>${jdk.version}</source>
                        <target>${jdk.version}</target>
                    </configuration>
                </plugin>

                <!-- Пример "внедрения" в build life-cycle -->
                <!-- копируем все исходники проекта в quiz.war/META-INF/project-sources/ -->
                <plugin>
                    <!-- Работа будет выполнена этим плагином -->
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>2.6</version>
                    <executions>
                        <execution>
                            <!-- Нами придуманное имя goal-а -->
                            <id>copy-project-sources</id>
                            <!-- Фаза build life-cycle на которой выполним работу -->
                            <phase>prepare-package</phase>
                            <goals>
                                <!-- goal плагина, который вызываем -->
                                <goal>copy-resources</goal>
                            </goals>
                            <!-- конфигурационные данные необходимые плагину для выполнения goal -->
                            <configuration>
                                <!-- файлы из этого места -->
                                <resources>
                                    <resource>
                                        <directory>src/main/java/</directory>
                                        <filtering>false</filtering>
                                    </resource>
                                </resources>
                                <!-- копируем сюда -->
                                <outputDirectory>${basedir}/target/quiz01/META-INF/project-sources</outputDirectory>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>
